name: Deploy Vite React to DigitalOcean VPS

on:
  push:
    branches:
      - master # Change if using a different branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy files to DigitalOcean VPS using SCP with password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "CONSULTPRO_CLIENT"
          target: "~/"

      - name: Deploy Docker Container on VPS using SSH with password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd ~/CONSULTPRO_CLIENT
            docker stop vite-frontend || true
            docker rm vite-frontend || true
            docker build -t vite-frontend .
            docker run -d --name vite-frontend -p 5173:80 vite-frontend

      #Deploy Backend (Spring Boot)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Build Spring Boot JAR
        run: |
          cd CONSULTPRO_SERVER
          mvn clean package -DskipTests

      - name: Copy backend files to DigitalOcean VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          source: "CONSULTPRO_SERVER/Dockerfile, CONSULTPRO_SERVER/target/*.jar"
          target: "~/backend"

      - name: Deploy Backend with Docker on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd ~/backend
            echo "Checking if Dockerfile exists..."
            if [ ! -f Dockerfile ]; then echo "❌ Dockerfile missing!"; exit 1; fi
            echo "✅ Dockerfile found."

            echo "Stopping and removing any existing backend container..."
            docker stop springboot-backend || true
            docker rm springboot-backend || true

            echo "Building new Docker image..."
            docker build -t springboot-backend .

            echo "Running new backend container..."
            docker run -d --name springboot-backend -p 8081:8081 springboot-backend
